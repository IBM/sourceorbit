// https://www.ibm.com/docs/en/i/7.4?topic=reference-built-in-functions

import Statement from "vscode-db2i/src/language/sql/statement";
import { ObjectRef } from "vscode-db2i/src/language/sql/types";
import { SourceSymbol } from "../targets";
import { trimQuotes } from "../utils";

const AGGREGATE_FUNCTIONS = [
  "ANY_VALUE",
  "ARRAY_AGG",
  "AVG",
  "CORR",
  "CORRELATION",
  "COUNT",
  "COUNT_BIG",
  "COVARIANCE",
  "COVAR",
  "COVAR_SAMP",
  "COVARIANCE_SAMP",
  "GROUPING",
  "JSON_ARRAYAGG",
  "JSON_OBJECTAGG",
  "LISTAGG",
  "MAX",
  "MEDIAN",
  "MIN",
  "PERCENTILE_CONT",
  "PERCENTILE_DISC",
  "STDDEV_POP",
  "STDDEV",
  "STDDEV_SAMP",
  "SUM",
  "VAR_POP",
  "VARIANCE",
  "VAR",
  "VAR_SAMP",
  "VARIANCE_SAMP",
  "XMLAGG",
  "XMLGROUP"
];

const SCALAR_FUNCTIONS = [
`ABS`, `ABSVAL`,
`ACOS`,
`ADD_DAYS`,
`ADD_HOURS`,
`ADD_MINUTES`,
`ADD_MONTHS`,
`ADD_SECONDS`,
`ADD_YEARS`,
`ANTILOG`,
`ARRAY_MAX_CARDINALITY`,
`ARRAY_TRIM`,
`ASCII`,
`ASIN`,
`ATAN`,
`ATANH`,
`ATAN2`,
`BASE64_DECODE`,
`BASE64_ENCODE`,
`BIGINT`,
`BINARY`,
`BITAND`, `BITANDNOT`, `BITOR`, `BITXOR`, `and BITNOT`,
`BIT_LENGTH`,
`BLOB`,
`BSON_TO_JSON`,
`CARDINALITY`,
`CEILING`, `CEIL`,
`CHAR`,
`CHARACTER_LENGTH`, `CHAR_LENGTH`,
`CHR`,
`CLOB`,
`COALESCE`,
`COMPARE_DECFLOAT`,
`CONCAT`,
`CONTAINS`,
`COS`,
`COSH`,
`COT`,
`CURDATE`,
`CURTIME`,
`DATABASE`,
`DATAPARTITIONNAME`,
`DATAPARTITIONNUM`,
`DATE`,
`DAY`,
`DAYNAME`,
`DAYOFMONTH`,
`DAYOFWEEK`,
`DAYOFWEEK_ISO`,
`DAYOFYEAR`,
`DAYS`,
`DBCLOB`,
`DBPARTITIONNAME`,
`DBPARTITIONNUM`,
`DECFLOAT`,
`DECFLOAT_FORMAT`,
`DECFLOAT_SORTKEY`,
`DECIMAL`, `DEC`,
`DECRYPT_BIT`, `DECRYPT_BINARY`, `DECRYPT_CHAR`, `DECRYPT_DB`,
`DEGREES`,
`DIFFERENCE`,
`DIGITS`,
`DLCOMMENT`,
`DLLINKTYPE`,
`DLURLCOMPLETE`,
`DLURLPATH`,
`DLURLPATHONLY`,
`DLURLSCHEME`,
`DLURLSERVER`,
`DLVALUE`,
`DOUBLE_PRECISION`, `DOUBLE`,
`ENCRYPT_AES`,
`ENCRYPT_AES256`,
`ENCRYPT_RC2`, `ENCRPYT`,
`ENCRYPT_TDES`,
`EXP`,
`EXTRACT`,
`FIRST_DAY`,
`FLOAT`,
`FLOOR`,
`GENERATE_UNIQUE`,
`GENERATE_UUID`,
`GENERATE_UUID_BINARY`,
`GET_BLOB_FROM_FILE`,
`GET_CLOB_FROM_FILE`,
`GET_DBCLOB_FROM_FILE`,
`GET_XML_FILE`,
`GETHINT`,
`GRAPHIC`,
`GREATEST`,
`HASH_MD5`, `HASH_SHA1`, `HASH_SHA256`, `HASH_SHA512`,
`HASH_ROW`,
`HASH_VALUES`,
`HASHED_VALUE`,
`HEX`,
`HEXTORAW`,
`HOUR`,
`HTML_ENTITY_DECODE`,
`HTML_ENTITY_ENCODE`,
`HTTP_DELETE and HTTP_DELETE_BLOB`,
`HTTP_GET and HTTP_GET_BLOB`,
`HTTP_PATCH and HTTP_PATCH_BLOB`,
`HTTP_POST and HTTP_POST_BLOB`,
`HTTP_PUT and HTTP_PUT_BLOB`,
`IDENTITY_VAL_LOCAL`,
`IFNULL`,
`INSERT`,
`INSTR`,
`INTEGER`, `INT`,
`INTERPRET`,
`JSON_ARRAY`,
`JSON_OBJECT`,
`JSON_QUERY`,
`JSON_TO_BSON`,
`JSON_UPDATE`,
`JSON_VALUE`,
`JULIAN_DAY`,
`LAND`,
`LAST_DAY`,
`LCASE`,
`LEAST`,
`LEFT`,
`LENGTH`,
`LN`,
`LNOT`,
`LOCATE`,
`LOCATE_IN_STRING`,
`LOG10`,
`LOR`,
`LOWER`,
`LPAD`,
`LTRIM`,
`MAX`,
`MAX_CARDINALITY`,
`MICROSECOND`,
`MIDNIGHT_SECONDS`,
`MIN`,
`MINUTE`,
`MOD`,
`MONTH`,
`MONTHNAME`,
`MONTHS_BETWEEN`,
`MQREAD`,
`MQREADCLOB`,
`MQRECEIVE`,
`MQRECEIVECLOB`,
`MQSEND`,
`MULTIPLY_ALT`,
`NEXT_DAY`,
`NORMALIZE_DECFLOAT`,
`NOW`,
`NULLIF`,
`NVL`,
`OCTET_LENGTH`,
`OVERLAY`,
`PI`,
`POSITION`,
`POSSTR`,
`POWER`, `POW`,
`QUANTIZE`,
`QUARTER`,
`RADIANS`,
`RAISE_ERROR`,
`RANDOM`, `RAND`,
`REAL`,
`REGEXP_COUNT`,
`REGEXP_INSTR`,
`REGEXP_REPLACE`,
`REGEXP_SUBSTR`,
`REPEAT`,
`REPLACE`,
`RID`,
`RIGHT`,
`ROUND`,
`ROUND_TIMESTAMP`,
`ROWID`,
`RPAD`,
`RRN`,
`RTRIM`,
`SCORE`,
`SECOND`,
`SIGN`,
`SIN`,
`SINH`,
`SMALLINT`,
`SOUNDEX`,
`SPACE`,
`SQRT`,
`STRIP`,
`STRLEFT`,
`STRPOS`,
`STRRIGHT`,
`SUBSTR`,
`SUBSTRING`,
`TABLE_NAME`,
`TABLE_SCHEMA`,
`TAN`,
`TANH`,
`TIME`,
`TIMESTAMP`,
`TIMESTAMP_FORMAT`,
`TIMESTAMP_ISO`,
`TIMESTAMPDIFF`,
`TIMESTAMPDIFF_BIG`,
`TO_CHAR`,
`TO_CLOB`,
`TO_DATE`,
`TO_NUMBER`,
`TO_TIMESTAMP`,
`TOTALORDER`,
`TRANSLATE`,
`TRIM`,
`TRIM_ARRAY`,
`TRUNCATE`, `TRUNC`,
`TRUNC_TIMESTAMP`,
`UCASE`,
`UPPER`,
`URL_DECODE`,
`URL_ENCODE`,
`VALUE`,
`VARBINARY`,
`VARBINARY_FORMAT`,
`VARCHAR`,
`VARCHAR_BIT_FORMAT`,
`VARCHAR_FORMAT`,
`VARCHAR_FORMAT_BINARY`,
`VARGRAPHIC`,
`VERIFY_GROUP_FOR_USER`,
`WEEK`,
`WEEK_ISO`,
`WRAP`,
`XMLATTRIBUTES`,
`XMLCOMMENT`,
`XMLCONCAT`,
`XMLDOCUMENT`,
`XMLELEMENT`,
`XMLFOREST`,
`XMLNAMESPACES`,
`XMLPARSE`,
`XMLPI`,
`XMLROW`,
`XMLSERIALIZE`,
`XMLTEXT`,
`XMLVALIDATE`,
`XOR`,
`XSLTRANSFORM`,
`YEAR`,
`ZONED`,
];

export function isSqlFunction(name: string): boolean {
  name = name.toUpperCase();
  return (
    AGGREGATE_FUNCTIONS.includes(name) ||
    SCALAR_FUNCTIONS.includes(name)
  );
}

export function getSymbolFromDef(relativePath: string, statement: Statement, mainDef: ObjectRef) {
  const symbol: SourceSymbol = {
    name: mainDef.object.system || trimQuotes(mainDef.object.name, `"`),
    type: mainDef.createType || `object`,
    relativePath,
    references: {[relativePath]: [{
      start: mainDef.tokens[0].range.start,
      end: mainDef.tokens[mainDef.tokens.length - 1].range.end
    }]}
  }

  const children = statement.getRoutineParameters();

  if (children && children.length > 0) {
    symbol.children = children.map(child => ({
      name: child.alias,
      type: child.createType,
      relativePath,
      references: { [relativePath]: [child.tokens[0].range] }
    }))
  }

  return symbol;
}